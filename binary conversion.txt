.data
 
.balign 4
a: .skip 32

.text

.global main
main:

/* N = D × Q + R where 0 ≤ |R| < |D| */
/* r0 contains N */
/* r1 contains D */

    mov r2, #2             /* r2 ← r1. We keep D in r2 */
    mov r1, r0             /* r1 ← r0. We keep N in r1 */
    mov r0, #0             /* r0 ← 0. Set Q = 0 initially */
	ldr r3, addr_of_a      /* r3 ← &a */
	mov r4, #0             /* r4 ← 0 */
	
	b loop
Lloop:
    add r0, r0, #1         /* r0 ← r0 + 1. Q = Q + 1 */
    sub r1, r1, r2         /* r1 ← r1 - r2 */
Lloop_check:
    cmp r1, r2             /* compute r1 - r2 */
    bhs Lloop              /* branch if r1 >= r2 (C=0 or Z=1) */
	
/* r0 already contains Q */
/* r1 already contains R */
	
	add r5, r3, r4, LSL #2  /* r5 ← r3 + (r4*4) */
	str r1, [r5]            /* *r5 ← r4 */
	
	add r4, r4, #1          /* r4 ← r4 + 1 */
	mov r1, r0
	mov r0, #0
loop:
	cmp r1, #0
    bhi Lloop_check
	
	bx lr
addr_of_a: .word a